x = rnorm(500)
hist(x, prob=T, breaks=10)
hist(x, prob=T, breaks=100)
hist(x, prob=T, breaks=1000)
clear
clear all
boxplot(x)
qqline(x)
x = rnorm(50)
qqnorm(x)
qqline(x)
y = rt(50, df=2)
qqnorm(y)
qqline(y)
x = runif(20, 0,1)
x = runif(20, 0, 1)
y = 1+2*x + rnorm(20, 0, .1)
plot(x, y)
x = rnorm(100)
acf(x)
y = rep(rnorm(2), 50)
acf(y)
c = function(){x = (23,0.1,-5.15)}
c = function(){x = [23,0.1,-5.15]}
c
c = c(23,0.1,-5.15)
c.append(28)
append(c, 28)
c
c = append(c, 28)
c
y = sort(vector)
y = sort(vector)
y = sort(x)
y
x
x
x
c
y = sort(c)
y
y
y = 4*y
y
y = round(x, digits=1)
y
y = round(y, digits=1)
y
round(y, digits=1)
y
round(y, digits=1)
round(y, digits=1)
plot(iris$Species)
plot(iris$Petal.Length)
plot(iris$Species, iris$Petal.Width)
plot(y)
hist(y, breaks = 50, main = "")
y <- rexp(n, rate=r)
exp(3, 1)
hist(exp(1,1))
?exp
hist(exp_fun(1,1))
hist(rexp(1,1))
plot(rexp(1,1))
plot(rexp(10,1))
plot(rexp(20,1))
plot(hist(20,1))
hist(rexp(20,1))
hist(rexp(200,1))
hist(rexp(2000,1))
hist(rexp(20000,1))
hist(rexp(200000,1))
hist(rexp(200000,2))
plot(rexp(200000,2))
plot(rexp(2000,2))
y = rexp(2000, 2)
hist(y)
x = 1:2000
y = rexp(x, 2)
hist(y)
plot(y)
hist(y)
hist(y, freq = TRUE)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = FALSE)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 5)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE)
hist(y, freq = FALSE, ylim = 1)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = 1)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = [0,1])
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(pexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(pexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
#plot(pexp(x,y))
plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
#plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
plot(x,y)
hist(x,y)
hist(y)
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x,1))
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x,1))
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, pexp(x,1))
plot(x, nexp(x,1))
plot(x, f(x,1))
f <- function(x,rate){rate*exp(-rate*x)}
plot(x, f(x,1))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
hist(y, freq = FALSE, ylim = c(0,1))
f <- function(x,rate){rate*exp(-rate*x)}
plot(x, f(x,1))
plot(x, f(x,1))
df = read.table("owid-covid-data.csv", sep=";",
header = TRUE, stringsAsFactors = FALSE)
df$date = as.Date(df$date, "%d-%m-%y")
dec = subset(df, df$date == as.Date("20-12-2020", "%d-%m-%y") &
df$continent == "Europe",
select = c(iso_code, new_cases_smoothed_per_million))
jan = subset(df, df$date == as.Date("20-01-2021", "%d-%m-%y") &
df$continent == "Europe",
select = c(iso_code, new_cases_smoothed_per_million))
dec$new_cases_smoothed_per_million =
as.numeric(gsub(",", ".", dec$new_cases_smoothed_per_million))
jan$new_cases_smoothed_per_million =
as.numeric(gsub(",", ".", jan$new_cases_smoothed_per_million))
dec_cases = dec$new_cases_smoothed_per_million
jan_cases = jan$new_cases_smoothed_per_million
summary(dec_cases)
sd(dec_cases)
summary(jan_cases)
sd(jan_cases)
par(mfrow=c(1,2))
plot(sort(dec_cases), main="Plot of sorted dec_cases vs. countries",
xlab="Sorted index of country", ylab="dec_cases")
plot(sort(jan_cases), main="Plot of sorted jan_cases vs. countries",
xlab="Sorted index of country", ylab="jan_cases")
hist(dec_cases, ylim=c(0,25))
hist(jan_cases, ylim=c(0,25))
boxplot(dec_cases, main="Boxplot of dec_cases", ylab="dec_cases", ylim=c(0,1050))
boxplot(jan_cases, main="Boxplot of jan_cases", ylab="jan_cases", ylim=c(0,1050))
par(mfrow=c(1,1))
plot(dec_cases, jan_cases)
cor(dec_cases, jan_cases)
cor(dec_cases, jan_cases, method="spearman")
cor(dec_cases, jan_cases, method="kendall")
print("Hello, World!")
# Set the CRAN mirror:
local({r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
options(repos = r)})
# Install the packages used in this tutorial:
packages <- c("C50", "ggplot2", "gmodels", "rsample", "skimr")
for (i in packages) {
if(!require(i, character.only = TRUE)) {
install.packages(i, dependencies = TRUE)
}
}
# Loading packages
library(C50)
library(ggplot2)
library(gmodels)
library(rsample)
library(skimr)
# Set the working directory
setwd("TYPE YOUR WORKING DIRECTORY HERE. USE / instead of \") # specify the working directory
# Read the data
tree_credit <- read.csv("tree_credit.csv")
wd()
getwd()
setwd('C:/Users/leonl/Desktop/SDA/Assignment 3')
getwd()
sample1 = scan(file='sample31')
sample1 = scan(file='sample31.txt')
?scan
sample1 = scan(file='sample31.txt', what=double())
sample1 = scan(file='sample31.txt', what=float())
sample1 = scan(file='sample31.txt', what=double())
sample(1)
sample1(1)
sample1[1]
sample1 = scan(file='sample31.txt')
sample1[1]
plot(sample1)
sort(sample1)
plot(sort(sample1))
hist(sample1)
scan('functions_Ch4.txt')
h_opt = scan('functions_Ch4.txt')
sample1 = scan('sample31.txt')
h_opt =
source('functions_Ch4.txt')
View(h_opt)
sample1 = scan('sample31.txt')
hist(sample1)
source('functions_Ch4.txt')
h_opt(sample1)
h_opt(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h))
h = h_opt(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h))
hist(sample)
hist(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h))
plot(density(sample1, kernel='epanechnikov', bw=1.5))
plot(density(sample1, kernel='epanechnikov', bw=1.3))
plot(density(sample1, kernel='epanechnikov', bw=1.2))
plot(density(sample1, kernel='epanechnikov', bw=1))
plot(density(sample1, kernel='epanechnikov', bw=2.5))
plot(density(sample1, kernel='epanechnikov', bw=3))
plot(density(sample1, kernel='epanechnikov', bw=h))
plot(density(sample1, kernel='epanechnikov', bw=h))
sample2 = scan('sample32.txt')
sample3 = scan('sample33.txt')
hist(sample3)
hist(sample2)
h3 = h_opt(sample3)
h1 = h_opt(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h1))
hcv = CV(h3, sample3, kernel='epanechnikov')
hcv = CV(1, sample3, kernel='epanechnikov')
hcv = CV(10, sample3, kernel='epanechnikov')
hcv = CV(100, sample3, kernel='epanechnikov')
hcv = CV(1000, sample3, kernel='epanechnikov')
hcv = CV(h3, sample3, kernel='epanechnikov')
hcv = CV(h3, sample3, kernel='gaussian')
help(CV)
h_vals = c(1:10)
h_vals = c(0:3, 0.1)
?c
h_vals = seq(0, 3, 0.1)
hcv_vals = seq(CV(h_vals, sample3, kernel='epanechnikov'))
hcv_vals[index] = CV(h_vals[index], sample3, kernel='epanechnikov')
h_vals = seq(0, 3, 0.1)
for (index in length(h_vals)) {
hcv_vals[index] = CV(h_vals[index], sample3, kernel='epanechnikov')
}
hcv_vals = seq(0, 3, 0.1)
for (index in length(h_vals)) {
hcv_vals[index] = CV(h_vals[index], sample3, kernel='epanechnikov')
}
plot(h_vals, hcv_vals)
h_vals = seq(0, 3, 0.1)
cv_vals = seq(0, 3, 0.1)
for (index in length(h_vals)) {
cv_vals[index] = CV(h_vals[index], sample3, kernel='epanechnikov')
}
plot(h_vals, cv_vals)
?density
plot(density(sample2, bw = h_opt(sample2), kernel='epanechnikov'))
plot(density(sample2, bw = h_opt(sample2), kernel='gaussian'))
yrange = seq(min(y), max(y), length.out=512)
yrange = seq(min(sample2), max(sample2), length.out=512)
lines(exp(yrange), density(sample2, bw=h_opt(sample2), kernel='gaussian',
from=min(yrange), to=max(yrange))$sample2/exp(yrange))
lines(exp(yrange), density(sample2, bw=h_opt(sample2), kernel='gaussian',
from=min(yrange), to=max(yrange))$sample2/exp(yrange))
yrange = seq(min(sample2), max(sample2), length.out=60)
lines(exp(yrange), density(sample2, bw=h_opt(sample2), kernel='gaussian',
from=min(yrange), to=max(yrange))$sample2/exp(yrange))
yrange = seq(min(sample2), max(sample2), length.out=512)
lines(exp(yrange), density(sample2, bw=h_opt(sample2), kernel='epanechnikov',
from=min(yrange), to=max(yrange))$sample2/exp(yrange))
length(density(sample2, bw=h_opt(sample2), kernel='epanechnikov',
from=min(yrange), to=max(yrange))$sample2/exp(yrange)))
length(density(sample2, bw=h_opt(sample2), kernel='epanechnikov',
from=min(yrange), to=max(yrange))$sample2/exp(yrange))
length(density(sample2, bw=h_opt(sample2), kernel='epanechnikov',
from=min(yrange), to=max(yrange))$sample2/exp(yrange))
lines(exp(yrange), density(sample2, bw=h_opt(sample2), kernel='epanechnikov',
from=min(yrange), to=max(yrange))$sample2/exp(yrange))
sample3 = scan('sample33.txt')
h3 = h_opt(sample3)
plot(sample3)
hist(sample3)
plot(density(sample3, kernel='epanechnikov', bw=h3))
plot(pgamma(sample3, shape=3, scale=0.4))
hist(pgamma(sample3, shape=3, scale=0.4))
plot(pgamma(sample3, shape=3, scale=0.4))
pgamma(sample3, shape=3, scale=0.4)
plot(pgamma(sample3, shape=3, scale=0.4))
lines(pgamma(sample3, shape=3, scale=0.4))
#Exercise 3.1
sample1 = scan('sample31.txt')
hist(sample1)
source('functions_Ch4.txt')
h1 = h_opt(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h1))
hist(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h1))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[0]))
h1_vals = seq(0.5,3,0.5)
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[0]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[1]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[2]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[4]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[5]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[6]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[7]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[5]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[4]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[4]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[2]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[4]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[4]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
h1_vals = seq(1,3,0.5)
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
h1_vals = c(1,2,3)
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[3]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[1]))
plot(density(sample1, kernel='gaussian', bw=h1_vals[1]))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
plot(density(sample1, kernel='gaussian', bw=h1_vals[3]))
?density
plot(density(sample1, kernel='rectangular', bw=h1_vals[3]))
plot(density(sample1, kernel='rectangular', bw=h1_vals[2]))
plot(density(sample1, kernel='rectangular', bw=h1_vals[1]))
plot(density(sample1, kernel='triangular', bw=h1_vals[1]))
plot(density(sample1, kernel='triangular', bw=h1_vals[2]))
plot(density(sample1, kernel='triangular', bw=h1_vals[3]))
?density
plot(density(sample1, kernel='biweight', bw=h1_vals[3]))
plot(density(sample1, kernel='biweight', bw=h1_vals[2]))
plot(density(sample1, kernel='biweight', bw=h1_vals[1]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[1]))
plot(density(sample1, kernel='epanechnikov', bw=h1_vals[2]))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
exp <- function(n, rate) {
x = rexp(n, rate)
title = paste("Histogram vs. Density\n", "n =", n, ", rate =", rate)
hist(x, freq = FALSE, col="white", border="black",main=title)
points = seq(0, max(x), length=length(x))
lines(points, dexp(points,rate), col="red")
}
par(mfrow=c(2,3))
exp(10, 3)
exp(100, 3)
exp(1000, 3)
exp(1000, 3)
exp(1000, 10)
exp(1000, 100)
par(mfrow=c(3,3))
### Exercise 3.1 ###
# import the data
y1 = scan('sample31.txt')
#import the functions h_opt and CV
source('functions_Ch4.txt')
h1_vals = c(1,2,3)
par(mfrow=c(3,3))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
?density
h1 = h_opt(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h1))
par(mfrow=c(1,3))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
### Exercise 3.1 ###
# import the data
y1 = scan('sample31.txt')
#import the functions h_opt and CV
source('functions_Ch4.txt')
h1_vals = c(1,2,3)
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
h1 = h_opt(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h1))
par(mfrow=c(1,1))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
h1_vals = c(1,2,3)
### Exercise 3.1 ###
# import the data
y1 = scan('sample31.txt')
#import the functions h_opt and CV
source('functions_Ch4.txt')
h1_vals = c(1,2,3)
par(mfrow=c(1,1))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
h1 = h_opt(sample1)
plot(density(sample1, kernel='epanechnikov', bw=h1))
sigma = sd(y1)
n = length(y1)
ddf = 0.212sigma^(-5)
ddf = 0.212*sigma^(-5)
### Exercise 3.1 ###
# import the data
y1 = scan('sample31.txt')
#import the functions h_opt and CV
source('functions_Ch4.txt')
h1_vals = c(1,2,3)
par(mfrow=c(1,1))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
h1 = h_opt(sample1)
sigma = sd(y1)
n = length(y1)
ddf = 0.212*sigma^(-5)
ddf = 3/(5*n*h1^5)
par(mfrow=c(1,3))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
par(mfrow=c(1,1))
plot(density(sample1, kernel='gaussian', bw=h1_vals[2]))
h1_vals = c(1,2,3)
plot(density(sample1, kernel='gaussian', bw=1))
plot(density(sample1, kernel='gaussian', bw=2))
plot(density(sample1, kernel='gaussian', bw=3))
plot(density(sample1, kernel='epanechnikov', bw=1))
plot(density(sample1, kernel='epanechnikov', bw=2))
plot(density(sample1, kernel='epanechnikov', bw=3))
hist(y1)
density(sample1, kernel='epanechnikov', bw=3)
test = density(sample1, kernel='epanechnikov', bw=3)
test.x
test[x]
test(x)
?density
test['x']
hist(y1)
hist(test['y'])
test['y']
test[test$y]
hist(test$y)
hist(test$x)
hist(test)
hist(y1)
