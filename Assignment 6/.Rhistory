x = rnorm(500)
hist(x, prob=T, breaks=10)
hist(x, prob=T, breaks=100)
hist(x, prob=T, breaks=1000)
clear
clear all
boxplot(x)
qqline(x)
x = rnorm(50)
qqnorm(x)
qqline(x)
y = rt(50, df=2)
qqnorm(y)
qqline(y)
x = runif(20, 0,1)
x = runif(20, 0, 1)
y = 1+2*x + rnorm(20, 0, .1)
plot(x, y)
x = rnorm(100)
acf(x)
y = rep(rnorm(2), 50)
acf(y)
c = function(){x = (23,0.1,-5.15)}
c = function(){x = [23,0.1,-5.15]}
c
c = c(23,0.1,-5.15)
c.append(28)
append(c, 28)
c
c = append(c, 28)
c
y = sort(vector)
y = sort(vector)
y = sort(x)
y
x
x
x
c
y = sort(c)
y
y
y = 4*y
y
y = round(x, digits=1)
y
y = round(y, digits=1)
y
round(y, digits=1)
y
round(y, digits=1)
round(y, digits=1)
plot(iris$Species)
plot(iris$Petal.Length)
plot(iris$Species, iris$Petal.Width)
plot(y)
hist(y, breaks = 50, main = "")
y <- rexp(n, rate=r)
exp(3, 1)
hist(exp(1,1))
?exp
hist(exp_fun(1,1))
hist(rexp(1,1))
plot(rexp(1,1))
plot(rexp(10,1))
plot(rexp(20,1))
plot(hist(20,1))
hist(rexp(20,1))
hist(rexp(200,1))
hist(rexp(2000,1))
hist(rexp(20000,1))
hist(rexp(200000,1))
hist(rexp(200000,2))
plot(rexp(200000,2))
plot(rexp(2000,2))
y = rexp(2000, 2)
hist(y)
x = 1:2000
y = rexp(x, 2)
hist(y)
plot(y)
hist(y)
hist(y, freq = TRUE)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = FALSE)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 5)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE)
hist(y, freq = FALSE, ylim = 1)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = 1)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = [0,1])
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(pexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(pexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
#plot(pexp(x,y))
plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
#plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
plot(x,y)
hist(x,y)
hist(y)
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x,1))
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x,1))
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, pexp(x,1))
plot(x, nexp(x,1))
plot(x, f(x,1))
f <- function(x,rate){rate*exp(-rate*x)}
plot(x, f(x,1))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
hist(y, freq = FALSE, ylim = c(0,1))
f <- function(x,rate){rate*exp(-rate*x)}
plot(x, f(x,1))
plot(x, f(x,1))
df = read.table("owid-covid-data.csv", sep=";",
header = TRUE, stringsAsFactors = FALSE)
df$date = as.Date(df$date, "%d-%m-%y")
dec = subset(df, df$date == as.Date("20-12-2020", "%d-%m-%y") &
df$continent == "Europe",
select = c(iso_code, new_cases_smoothed_per_million))
jan = subset(df, df$date == as.Date("20-01-2021", "%d-%m-%y") &
df$continent == "Europe",
select = c(iso_code, new_cases_smoothed_per_million))
dec$new_cases_smoothed_per_million =
as.numeric(gsub(",", ".", dec$new_cases_smoothed_per_million))
jan$new_cases_smoothed_per_million =
as.numeric(gsub(",", ".", jan$new_cases_smoothed_per_million))
dec_cases = dec$new_cases_smoothed_per_million
jan_cases = jan$new_cases_smoothed_per_million
summary(dec_cases)
sd(dec_cases)
summary(jan_cases)
sd(jan_cases)
par(mfrow=c(1,2))
plot(sort(dec_cases), main="Plot of sorted dec_cases vs. countries",
xlab="Sorted index of country", ylab="dec_cases")
plot(sort(jan_cases), main="Plot of sorted jan_cases vs. countries",
xlab="Sorted index of country", ylab="jan_cases")
hist(dec_cases, ylim=c(0,25))
hist(jan_cases, ylim=c(0,25))
boxplot(dec_cases, main="Boxplot of dec_cases", ylab="dec_cases", ylim=c(0,1050))
boxplot(jan_cases, main="Boxplot of jan_cases", ylab="jan_cases", ylim=c(0,1050))
par(mfrow=c(1,1))
plot(dec_cases, jan_cases)
cor(dec_cases, jan_cases)
cor(dec_cases, jan_cases, method="spearman")
cor(dec_cases, jan_cases, method="kendall")
print("Hello, World!")
# Set the CRAN mirror:
local({r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
options(repos = r)})
# Install the packages used in this tutorial:
packages <- c("C50", "ggplot2", "gmodels", "rsample", "skimr")
for (i in packages) {
if(!require(i, character.only = TRUE)) {
install.packages(i, dependencies = TRUE)
}
}
# Loading packages
library(C50)
library(ggplot2)
library(gmodels)
library(rsample)
library(skimr)
# Set the working directory
setwd("TYPE YOUR WORKING DIRECTORY HERE. USE / instead of \") # specify the working directory
# Read the data
tree_credit <- read.csv("tree_credit.csv")
setwd("C:/Users/leonl/Desktop/SDA_git/Assignment 6")
source('C:/Users/leonl/Desktop/SDA_git/Assignment 6/Assignment6.R', echo=TRUE)
help(cbind)
test = rbind(c("Kendall", "Spearman"), c(1, 2))
test[2,1] = as.numeric(test[2,1])
test[2,2] = as.numeric(test[2,2])
B = 10000
# test 1: n = 45
n = 45
sim1 = aresimulation(B, n)
# test 2: n = 50
n = 50
sim2 = aresimulation(B, n)
as.numeric(sim2[2,1])/as.numeric(sim2[2,2])
# test 3: n = 55
n = 55
sim3 = aresimulation(B, n)
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])
as.numeric(sim1[2,1])/as.numeric(sim1[2,2])
as.numeric(sim2[2,1])/as.numeric(sim1[2,2])
as.numeric(sim3[2,1])/as.numeric(sim1[2,2])
as.numeric(sim1[2,1])/as.numeric(sim2[2,2])
as.numeric(sim2[2,1])/as.numeric(sim2[2,2])
as.numeric(sim3[2,1])/as.numeric(sim2[2,2])
as.numeric(sim1[2,1])/as.numeric(sim3[2,2])
as.numeric(sim2[2,1])/as.numeric(sim3[2,2])
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])
as.numeric(sim1[2,1])/as.numeric(sim1[2,2])
### Exercise 6.2 ###
alpha = 0.05
infected = matrix(c(24, 15, 1020, 1167),
nrow=2, ncol=2,
dimnames=list(c('men', 'women'),
c('deaths', 'recoveries')))
# a)
# null hypothesis: the row and column variables are independent
# alternative hypothesis: the row and column variables are dependent
fisher.test(infected)
# b)
# null hypothesis: men are less often among the fatalities than women
# alternative hypothesis: men are more often among the fatalities than women
fisher.test(infected, alt='g')
# c)
pl = phyper(24, 1044, 1182, 39)
pr = 1 - phyper(24-1, 1044, 1182, 39)
2*min(c(pl, pr))
### Exercise 6.3 ###
data = data.frame(nausea$Incidence.of.Nausea,
nausea$Number.of.Patients-nausea$Incidence.of.Nausea,
row.names = rownames(nausea))
colnames(data) = c('Nausea', 'No nausea')
alpha = 0.05
# a)
# b)
chisq.test(data)
chisq.test(data)$expected
# c)
chisq.test(data, simulate.p.value=TRUE)
# d)
round(chisq.test(data)$residuals, 2)
round(chisq.test(data)$stdres, 2)
# e)
B=10000
t = maxcontributionscat(data)
boot = bootstrapcat(data, B, maxcontributionscat)
mean(boot>=t)
hist(boot)
# f)
# g)
data[1:2,]
fisher.test(data[1:2,], alternative='greater')
as.numeric(sim1[2,1])/as.numeric(sim1[2,2])
as.numeric(sim2[2,1])/as.numeric(sim1[2,2])
as.numeric(sim3[2,1])/as.numeric(sim1[2,2])
as.numeric(sim1[2,1])/as.numeric(sim2[2,2])
as.numeric(sim2[2,1])/as.numeric(sim2[2,2])
as.numeric(sim3[2,1])/as.numeric(sim2[2,2])
as.numeric(sim1[2,1])/as.numeric(sim3[2,2])
as.numeric(sim2[2,1])/as.numeric(sim3[2,2])
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])
as.numeric(sim1[2,1])/as.numeric(sim1[2,2])
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])
as.numeric(sim2[2,1])/as.numeric(sim2[2,2])
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])
as.numeric(sim1[2,1])/as.numeric(sim1[2,2])
as.numeric(sim2[2,1])/as.numeric(sim1[2,2])
as.numeric(sim3[2,1])/as.numeric(sim1[2,2])
as.numeric(sim1[2,1])/as.numeric(sim2[2,2])
as.numeric(sim2[2,1])/as.numeric(sim2[2,2])
as.numeric(sim3[2,1])/as.numeric(sim2[2,2])
as.numeric(sim1[2,1])/as.numeric(sim3[2,2])
as.numeric(sim2[2,1])/as.numeric(sim3[2,2])
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])
round(as.numeric(sim1[2,1])/as.numeric(sim1[2,2]),3)
round(as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),3)
round(as.numeric(sim3[2,1])/as.numeric(sim1[2,2]),3)
round(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),3)
round(as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),3)
round(as.numeric(sim3[2,1])/as.numeric(sim2[2,2]),3)
round(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),3)
round(as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),3)
round(as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),4)
round(as.numeric(sim1[2,1])/as.numeric(sim1[2,2]),4)
round(as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),4)
round(as.numeric(sim3[2,1])/as.numeric(sim1[2,2]),4)
round(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),4)
round(as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),4)
round(as.numeric(sim3[2,1])/as.numeric(sim2[2,2]),4)
round(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),4)
round(as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),4)
round(as.numeric(sim3[2,1])/as.numeric(sim2[2,2]),4)
help(matrix)
round(as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),4),round(as.numeric(sim3[2,1])/as.numeric(sim1[2,2]),4)
row1 = c(round(as.numeric(sim1[2,1])/as.numeric(sim1[2,2]),4),
round(as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),4),
round(as.numeric(sim3[2,1])/as.numeric(sim1[2,2]),4))
row2 = c(round(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),4),
round(as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),4),
round(as.numeric(sim3[2,1])/as.numeric(sim2[2,2]),4))
row3 = c(round(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),4),
round(as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),4),
round(as.numeric(sim3[2,1])/as.numeric(sim2[2,2]),4))
help(matrix)
matrix(c(row1, row2, row3), nrow=3, ncol=3)
row3 = c(round(as.numeric(sim1[2,1])/as.numeric(sim3[2,2]),4),
round(as.numeric(sim2[2,1])/as.numeric(sim3[2,2]),4),
round(as.numeric(sim3[2,1])/as.numeric(sim3[2,2]),4))
matrix(c(row1, row2, row3), nrow=3, ncol=3)
row1 = c(round(as.numeric(sim1[2,1])/as.numeric(sim1[2,2]),3),
round(as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),3),
round(as.numeric(sim3[2,1])/as.numeric(sim1[2,2]),3))
row2 = c(round(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),3),
round(as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),3),
round(as.numeric(sim3[2,1])/as.numeric(sim2[2,2]),3))
row3 = c(round(as.numeric(sim1[2,1])/as.numeric(sim3[2,2]),3),
round(as.numeric(sim2[2,1])/as.numeric(sim3[2,2]),3),
round(as.numeric(sim3[2,1])/as.numeric(sim3[2,2]),3))
help(matrix)
matrix(c(row1, row2, row3), nrow=3, ncol=3)
round(c(1.111,2.222),2)
row1 = c(as.numeric(sim1[2,1])/as.numeric(sim1[2,2]),
as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),
as.numeric(sim3[2,1])/as.numeric(sim1[2,2]))
row2 = c(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),
as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),
as.numeric(sim3[2,1])/as.numeric(sim2[2,2]))
row3 = c(as.numeric(sim1[2,1])/as.numeric(sim3[2,2])),
as.numeric(sim2[2,1])/as.numeric(sim3[2,2])),
as.numeric(sim3[2,1])/as.numeric(sim3[2,2])))
row3 = c(as.numeric(sim1[2,1])/as.numeric(sim3[2,2]),
as.numeric(sim2[2,1])/as.numeric(sim3[2,2]),
as.numeric(sim3[2,1])/as.numeric(sim3[2,2]))
matrix(c(row1, row2, row3), nrow=3, ncol=3)
round(matrix(c(row1, row2, row3), nrow=3, ncol=3),3)
as.numeric(sim2[2,1])/as.numeric(sim1[2,2])
sim3
round(matrix(c(row1, row2, row3), nrow=3, ncol=3),3)
as.numeric(sim2[2,1])/as.numeric(sim1[2,2])
col1 = c(as.numeric(sim1[2,1])/as.numeric(sim1[2,2]),
as.numeric(sim2[2,1])/as.numeric(sim1[2,2]),
as.numeric(sim3[2,1])/as.numeric(sim1[2,2]))
col2 = c(as.numeric(sim1[2,1])/as.numeric(sim2[2,2]),
as.numeric(sim2[2,1])/as.numeric(sim2[2,2]),
as.numeric(sim3[2,1])/as.numeric(sim2[2,2]))
col3 = c(as.numeric(sim1[2,1])/as.numeric(sim3[2,2]),
as.numeric(sim2[2,1])/as.numeric(sim3[2,2]),
as.numeric(sim3[2,1])/as.numeric(sim3[2,2]))
round(c(1.111,2.222),2)
round(matrix(c(col1, col2, col3), nrow=3, ncol=3),3)
as.numeric(sim2[2,1])/as.numeric(sim1[2,2])
help(cbind)
test = rbind(c("Kendall", "Spearman"), c(1, 2))
test[2,1] = as.numeric(test[2,1])
test[2,2] = as.numeric(test[2,2])
permutationval
length(permutationval[permutationval<=t])/B
B = 10000
length(permutationval[permutationval<=t])/B
t = cor.test(lawyers_rate, data$crime, method='k')$p.value
lawyers_rate
data$crime
data = read.csv("expensescrime.txt", sep=" ")
t = cor.test(lawyers_rate, data$crime, method='k')$p.value
length(permutationval[permutationval<=t])/B
t = cor.test(lawyers_rate, data$crime, method='k')$p.value
length(permutationval[permutationval<=t])/B
pairs(cbind(lawyers_rate, data$crime), labels=c('Lawyers rate', 'Crime'))
lawyers_rate[8] = mean(lawyers_rate)
lawyers_rate = data$lawyers/data$pop
pairs(cbind(lawyers_rate, data$crime), labels=c('Lawyers rate', 'Crime'))
lawyers_rate[8] = mean(lawyers_rate)
pairs(cbind(lawyers_rate, data$crime), labels=c('Lawyers rate', 'Crime'))
plot(lawyers_rate, data$crime)
plot(data$crime, lawyers_rate)
lawyers_rate = data$lawyers/data$pop
lawyers_rate[8] = mean(lawyers_rate)
cor.test(lawyers_rate, data$crime, method='k')
cor.test(lawyers_rate, data$crime, method='s')
B = 10000
t = cor.test(lawyers_rate, data$crime, method='k')$p.value
permutationval = numeric(B)
for(i in 1:B) {
sample_crime = sample(data$crime)
pl = cor.test(lawyers_rate,
sample_crime,
method='k',
alternative='g')$p.value
pr = cor.test(lawyers_rate,
sample_crime,
method='k',
alternative='l')$p.value
p = 2*min(pl, pr)
permutationval[i] = p
}
length(permutationval[permutationval<=t])/B
