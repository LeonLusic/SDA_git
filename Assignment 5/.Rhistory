x = rnorm(500)
hist(x, prob=T, breaks=10)
hist(x, prob=T, breaks=100)
hist(x, prob=T, breaks=1000)
clear
clear all
boxplot(x)
qqline(x)
x = rnorm(50)
qqnorm(x)
qqline(x)
y = rt(50, df=2)
qqnorm(y)
qqline(y)
x = runif(20, 0,1)
x = runif(20, 0, 1)
y = 1+2*x + rnorm(20, 0, .1)
plot(x, y)
x = rnorm(100)
acf(x)
y = rep(rnorm(2), 50)
acf(y)
c = function(){x = (23,0.1,-5.15)}
c = function(){x = [23,0.1,-5.15]}
c
c = c(23,0.1,-5.15)
c.append(28)
append(c, 28)
c
c = append(c, 28)
c
y = sort(vector)
y = sort(vector)
y = sort(x)
y
x
x
x
c
y = sort(c)
y
y
y = 4*y
y
y = round(x, digits=1)
y
y = round(y, digits=1)
y
round(y, digits=1)
y
round(y, digits=1)
round(y, digits=1)
plot(iris$Species)
plot(iris$Petal.Length)
plot(iris$Species, iris$Petal.Width)
plot(y)
hist(y, breaks = 50, main = "")
y <- rexp(n, rate=r)
exp(3, 1)
hist(exp(1,1))
?exp
hist(exp_fun(1,1))
hist(rexp(1,1))
plot(rexp(1,1))
plot(rexp(10,1))
plot(rexp(20,1))
plot(hist(20,1))
hist(rexp(20,1))
hist(rexp(200,1))
hist(rexp(2000,1))
hist(rexp(20000,1))
hist(rexp(200000,1))
hist(rexp(200000,2))
plot(rexp(200000,2))
plot(rexp(2000,2))
y = rexp(2000, 2)
hist(y)
x = 1:2000
y = rexp(x, 2)
hist(y)
plot(y)
hist(y)
hist(y, freq = TRUE)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = FALSE)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = TRUE)
x = 1:2000
y = rexp(x, 2)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 5)
hist(y, freq = FALSE)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE)
hist(y, freq = FALSE, ylim = 1)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = 1)
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = [0,1])
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(pexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(pexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
#plot(pexp(x,y))
plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
#plot(dexp(x,y))
x = 1:2000
y = rexp(x, 1)
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x))
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
plot(x,y)
hist(x,y)
hist(y)
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x,1))
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, dexp(x,1))
hist(y, freq = FALSE, ylim = c(0,1))
plot(x, pexp(x,1))
plot(x, nexp(x,1))
plot(x, f(x,1))
f <- function(x,rate){rate*exp(-rate*x)}
plot(x, f(x,1))
x = 1:2000
y = rexp(x, 1)
#hist(y, freq = FALSE, ylim = c(0,1))
plot(1:10, dexp(1:10))
hist(y, freq = FALSE, ylim = c(0,1))
f <- function(x,rate){rate*exp(-rate*x)}
plot(x, f(x,1))
plot(x, f(x,1))
df = read.table("owid-covid-data.csv", sep=";",
header = TRUE, stringsAsFactors = FALSE)
df$date = as.Date(df$date, "%d-%m-%y")
dec = subset(df, df$date == as.Date("20-12-2020", "%d-%m-%y") &
df$continent == "Europe",
select = c(iso_code, new_cases_smoothed_per_million))
jan = subset(df, df$date == as.Date("20-01-2021", "%d-%m-%y") &
df$continent == "Europe",
select = c(iso_code, new_cases_smoothed_per_million))
dec$new_cases_smoothed_per_million =
as.numeric(gsub(",", ".", dec$new_cases_smoothed_per_million))
jan$new_cases_smoothed_per_million =
as.numeric(gsub(",", ".", jan$new_cases_smoothed_per_million))
dec_cases = dec$new_cases_smoothed_per_million
jan_cases = jan$new_cases_smoothed_per_million
summary(dec_cases)
sd(dec_cases)
summary(jan_cases)
sd(jan_cases)
par(mfrow=c(1,2))
plot(sort(dec_cases), main="Plot of sorted dec_cases vs. countries",
xlab="Sorted index of country", ylab="dec_cases")
plot(sort(jan_cases), main="Plot of sorted jan_cases vs. countries",
xlab="Sorted index of country", ylab="jan_cases")
hist(dec_cases, ylim=c(0,25))
hist(jan_cases, ylim=c(0,25))
boxplot(dec_cases, main="Boxplot of dec_cases", ylab="dec_cases", ylim=c(0,1050))
boxplot(jan_cases, main="Boxplot of jan_cases", ylab="jan_cases", ylim=c(0,1050))
par(mfrow=c(1,1))
plot(dec_cases, jan_cases)
cor(dec_cases, jan_cases)
cor(dec_cases, jan_cases, method="spearman")
cor(dec_cases, jan_cases, method="kendall")
print("Hello, World!")
# Set the CRAN mirror:
local({r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
options(repos = r)})
# Install the packages used in this tutorial:
packages <- c("C50", "ggplot2", "gmodels", "rsample", "skimr")
for (i in packages) {
if(!require(i, character.only = TRUE)) {
install.packages(i, dependencies = TRUE)
}
}
# Loading packages
library(C50)
library(ggplot2)
library(gmodels)
library(rsample)
library(skimr)
# Set the working directory
setwd("TYPE YOUR WORKING DIRECTORY HERE. USE / instead of \") # specify the working directory
# Read the data
tree_credit <- read.csv("tree_credit.csv")
# f)
# location tests
t.test(seeded)
setwd("C:/Users/leonl/Desktop/SDA/Assignment 5")
### Exercise 5.1 ###
grades = scan("statgrades.txt")
source("functions_Ch3.txt")
source("functions_Ch5.txt")
hist(grades)
summary(grades)
qqnorm(grades)
# a)
# H_0: m <= 6, H_1: m > 6, alpha=1%
m = 6
n = length(grades)
l = sum(grades>m)
k = sum(grades==m)
binom.test(l,n,alt="g",conf.level=0.99)
help(binom.test)
# b)
# H_0: m = 6.5, H_1: m != 6.5, alpha=5%
m = 6.5
n = length(grades)
l = sum(grades>m)
k = sum(grades==m)
binom.test(l,n,alt="t",conf.level=0.95)
# p = P(grade>=7), H_0: p >= 35%, H_1: p < 35%, alpha=10%
length(grades[grades>=7])/length(grades)
### Exercise 5.2 ###
clouds = read.csv("clouds.txt", sep=" ")
clouds$seeded.clouds
seeded = clouds$seeded.clouds
# a)
# graphical and numerical investigation
summary(seeded)
hist(seeded)
hist(seeded[seeded<=500])
plot(density(seeded))
boxplot(seeded)
plot(sort(seeded,decreasing=TRUE),main="Scatterplot of seeded values")
qqexp(seeded)
abline(seeded)
# b)
# sample standard deviation
sd_seeded = sd(seeded)
# c)
# bootstrap sample standard deviation
sd_boot = sd(bootstrap(seeded,sd,B=1000))
# d)
# MAD measure of accuracy
mad_seeded = mad(seeded)
mad_seeded
# bootstrap MAD
mad_boot = mad(bootstrap(seeded,mad,B=1000))
sd(seeded)/sd_boot
mad(seeded)/mad_boot
# f)
# location tests
t.test(seeded)
wilcox.test(seeded)
### Exercise 5.3 ###
light = scan("newcomb.txt")
hist(light[c(1:20)])
hist(light[c(-46:-1)])
plot(density(light[c(1:20)]))
plot(density(light[c(-46:-1)]))
hist(light)
plot(density(light))
boxplot(light)
light[light>0]
hist(light[light>0])
boxplot(light[light>0])
plot(density(light[light>0]))
# f)
# location tests
t.test(seeded)
wilcox.test(seeded)
t.test(seeded)
help(t.test)
t.test(seeded,conf.level=0.99)
t.test(seeded,alt="t",conf.level=0.99)
t.test(seeded,conf.level=0.99)
wilcox.test(seeded,conf.level=0.99)
wilcox.test(seeded,conf.level=0.99)
wilcox.test(seeded,conf.int=T,conf.level=0.99)
help(binom.test)
help(rbind)
rbind(0:n,round(pbinom(0:n,size=n,p=0.5)))
n
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
rbind(0:n,round(pbinom(0:n,size=n,p=0.5)))
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
plot(rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3)))
hist(rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3)))
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),3))
sort(grades)
grades
greater[greater<0.005]
greater = rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
less = rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),3))
greater[greater<0.005]
less[less>0.995]
less[1-less<0.005]
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),3))
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
grades[0]
grades[1]
sort(grades)
help(rbind)
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
grades[14]
#
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),3))
grades[30]
grades[13]
grades[31]
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
# m_0 > 5.05
1-pbinom(12,n-1,0.5)
# m_0 > 5.05
pbinom(12,n-1,0.5)
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),3))
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),3))
# m_0 > 5.05
pbinom(13,n-1,0.5)
# m_0 < 6.06
1 - pbinom(30,n-1,0.5)
grades[31]
grades[14]
sort(seeded)
n = length(seeded)
help(rbind)
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),3))
grades[7]
grades[6]
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),4))
grades[7]
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),4))
grades[21]
seeded[7]
seeded[7]
# m_0 > 119
pbinom(7,n-1,0.5)
seeded[21]
sort(seeded)
seeded[7]
seeded[21]
sort(seeded)[21]
n = length(seeded)
help(rbind)
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),4))
sort(seeded)[7]
# m_0 > 92.4
pbinom(7,n-1,0.5)
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),4))
sort(seeded)[21]
# m_0 < 489.1
1 - pbinom(30,n-1,0.5)
# m_0 < 489.1
1 - pbinom(20,n-1,0.5)
rbind(0:n,round(pbinom(0:n,size=n,p=0.5),4))
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),4))
sort(seeded)[8]
sort(seeded)[7]
# m_0 > 92.4
pbinom(7,n-1,0.5)
rbind(0:n,round(1-pbinom((0:n)-1,size=n,p=0.5),4))
sort(seeded)[21]
# m_0 < 489.1 = seeded[21]
1 - pbinom(20,n-1,0.5)
# m_0 > 92.4 = seeded[7]
pbinom(7,n-1,0.5)
t.test(seeded,conf.level=0.99)
wilcox.test(seeded,conf.int=T,conf.level=0.99)
hist(seeded)
hist(seeded[seeded<=500])
plot(density(seeded))
boxplot(seeded)
plot(sort(seeded,decreasing=TRUE),main="Scatterplot of seeded values")
qqexp(seeded)
plot(sort(seeded,decreasing=TRUE),main="Scatterplot of seeded values")
qqexp(seeded)
abline(seeded)
qqnorm(seeded)
symplot(seeded)
duplicated(seeded)
seeded
sort(seeded)
seeded[length(seeded)/2]
duplicated(sort(seeded))
median(seeded)
# g)
# location test on location less than 119.0, alpha=5%
m = 119.0
n = length(seeded)
l = sum(seeded>m)
k = sum(seeded==m)
binom.test(l,n,alt="g",conf.level=0.95)
